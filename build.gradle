plugins {
  id 'groovy'
  id 'maven'
  id 'maven-publish'
  id 'nebula.nebula-bintray' version '3.1.0'
}
apply from: './src/test/gradle-plugins/colored-test-output.gradle'

dependencies {
  compile gradleApi()
  compile group: 'org.codehaus.groovy', name: 'groovy', version: '2.3.6'
  compile group: 'org.yaml', name: 'snakeyaml', version: '1.16'

  testCompile group: 'junit', name: 'junit', version: '4.11'
  testCompile group: 'org.spockframework', name: 'spock-core', version: '1.0-groovy-2.3'
}

repositories {
  mavenCentral()
}

task('sourceJar', type: Jar) {
  classifier = 'sources'
  from project.sourceSets.main.allSource
}

task('groovydocJar', type: Jar) {
  classifier = 'groovydoc'
  from file('build/docs/groovydoc')
}.dependsOn groovydoc

publishing {
  publications {
    nebula(MavenPublication) {
      from components.java
      groupId 'nl.qkrijger.gradle'
      artifactId 'docker-gradle'
      version project.version
      artifact sourceJar
      artifact groovydocJar
    }
  }
}

bintray {
  user = project.bintrayUser ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
  key = project.bintrayKey ? project.property('bintrayKey') : System.getenv('BINTRAY_KEY')
  publications = ['nebula']
  pkg {
    repo = 'gradle-plugins'
    name = 'docker-gradle'
    userOrg = 'qkrijger'
    licenses = ['Apache-2.0']
    vcsUrl = 'https://github.com/Krijger/docker-gradle.git'
    websiteUrl = 'https://github.com/Krijger/docker-gradle'
    issueTrackerUrl = 'https://github.com/Krijger/docker-gradle/issues'
    labels = ['gradle', 'docker', 'plugin', 'ci']
  }
}

artifactory {
  publish {
    repository {
      username = project.bintrayUser ?: System.getenv('BINTRAY_USER')
      password = project.bintrayKey ?: System.getenv('BINTRAY_KEY')
    }
  }
}

// FIXME #19 next two lines
tasks.test.dependsOn 'jar'
tasks.test.dependsOn 'publishToMavenLocal'

tasks.bintrayUpload.dependsOn 'test'
tasks.artifactoryPublish.dependsOn 'test'

def travisBranch = System.getenv().get("TRAVIS_BRANCH")
if (travisBranch ? travisBranch =~ '^master$' : false) {
  logger.info 'This build is on Travis and the branch is master. Will therefore perform publish tasks for bintray or artifactory.'
  if ((project.version as String).endsWith('SNAPSHOT')) {
    logger.info 'This build is a SNAPSHOT build. Will perform Artifactory publish, but not Bintray upload'
    turnOffBintrayUpload()
  } else {
    logger.info 'This build is a release build. Will perform Bintray upload, but not Artifactory publish'
    turnOffArtifactoryPublish()
  }
} else {
  logger.info 'This build is not on Travis or is not the master branch. Will therefore NOT perform publish tasks for bintray or artifactory.'
  turnOffBintrayUpload()
  turnOffArtifactoryPublish()
}

private turnOffArtifactoryPublish() {
  tasks.artifactoryPublish.onlyIf { false }
}

private turnOffBintrayUpload() {
  tasks.bintrayUpload.onlyIf { false }
}
