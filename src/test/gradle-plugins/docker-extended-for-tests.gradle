allprojects {
  repositories {
    jcenter()
  }
}

def travisBuild = System.getenv('TRAVIS_BRANCH') != null
logger.info "Running on Travis: '$travisBuild'"

allprojects { currentProject ->
  apply plugin: 'docker'
  docker {
    stopContainers = !travisBuild
  }
}
allprojects { currentProject ->
  afterEvaluate {
    if (!currentProject.tasks.hasProperty('check')) {
      currentProject.task('check').dependsOn currentProject.tasks.dockerCheck
    }
  }

  afterEvaluate {
    Task cleanupTask = currentProject.task('cleanup', description: 'Remove the test docker image by id,', type: Exec) {
      commandLine 'docker', 'rmi', "-f" , "${-> currentProject.docker.imageId}"
    }
    cleanupTask.onlyIf {
      currentProject.extensions.docker.stopContainers && currentProject.tasks.buildImage.didWork
    }
    currentProject.tasks.buildImage.finalizedBy cleanupTask

    currentProject.rootProject.getAllTasks(true).values().flatten().findAll({ task -> task.group == 'Docker' }).each {
      cleanupTask.mustRunAfter it
    }
  }
}

