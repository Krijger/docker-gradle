apply plugin: 'docker'

allprojects {
  repositories {
    jcenter()
  }
}

def travisBuild = System.getenv('TRAVIS_BRANCH') != null
logger.info "Running on Travis: '$travisBuild'"

docker {
  stopContainers = !travisBuild
}

allprojects { Project currentProject ->
  afterEvaluate {
    Task cleanupTask = currentProject.task('cleanup', description: 'Remove the test docker image by id,', type: Exec) {
      commandLine 'docker', 'rmi', "-f" , "${-> currentProject.docker.imageId}"
    }
    cleanupTask.onlyIf {
      currentProject.extensions.docker.stopContainers && currentProject.tasks.findByName('buildImage')?.didWork }
    if (currentProject.tasks.findByName('buildImage')) {
      currentProject.tasks.getByName('buildImage').finalizedBy cleanupTask
    }

    Task testTask = currentProject.tasks.findByName('test')
    if (testTask) {
      cleanupTask.mustRunAfter testTask
    }
    currentProject.getAllTasks(true).values().each { taskSet ->
      taskSet.findAll({ task -> task.group == 'Docker' || task.name == 'test' }).each { dockerTask ->
        cleanupTask.mustRunAfter dockerTask
      }
    }
    if (currentProject.tasks.findByName('check')) {
      currentProject.tasks.findByName('check').dependsOn cleanupTask
    } else {
      currentProject.tasks.whenTaskAdded { Task addedTask ->
        if (addedTask.name == 'check') {
          addedTask.dependsOn cleanupTask
        }
      }
    }
  }
}

